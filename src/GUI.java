import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JButton;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JDesktopPane;
import javax.swing.JLayeredPane;
import java.awt.CardLayout;
import javax.swing.JPanel;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormSpecs;
import com.jgoodies.forms.layout.RowSpec;
import javax.swing.border.LineBorder;
import java.awt.Color;
import javax.swing.SwingConstants;
import javax.swing.Timer;

import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.border.EtchedBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.UIManager;
import javax.swing.JToolBar;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JTextArea;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JTabbedPane;
import javax.swing.JSplitPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.border.TitledBorder;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

// lots of stuff generated by Windows Builder; see methods for action on components and methods in the end of file
public class GUI {
	
	// Database
	SqliteDB db = new SqliteDB();

	private JFrame frame;
	
	private JPanel mainPanel;
	private JPanel receptionPanel;
	private JPanel nursePanel;
	private JPanel doctorPanel;
	
	private JTextField recFN_TF;
	private JTextField recLN_TF;
	private JTextField recDOB_TF;
	private JTextArea recCondition_TA;
	
	
	DoubleLinkedList dll = new DoubleLinkedList();
	DoubleLinkedList dllSorted = new DoubleLinkedList();
	DoubleLinkedList dllAll = new DoubleLinkedList();
	
	private DefaultListModel<Patient> listModel;
	private DefaultListModel<Patient> doclistModel;
	private DefaultListModel<Patient> listModelAll;
	
	
	private JTextField recSP_FN_TF;
	private JTextField recSP_LN_TF;
	private JTextField recSP_DOB_TF;
	private JTextArea recSP_Cond_TA;
	private JLabel recSP_Priority_Lbl;
	private JButton recDelete_Btn;
	private JButton recEdit_Btn;
	
	private Patient editPatient;
	
	// variable to track if saving new patient or updating existing
	private boolean isEdit = false;
	
	// variable to track which DLL to update after saving: DLL for queue or for ALL patients
	private boolean isQueueList = true;
	
	private JLabel rec_Notice_Lbl;
	private JTextField nur_FN_TF;
	private JTextField nur_LN_TF;
	private JTextField nur_DOB_TF;
	private JTextField nurSP_FN_TF;
	private JTextField nurSP_LN_TF;
	private JTextField nurSP_DOB_TF;
	private JComboBox nurPrior_CB;
	
	private JList<Patient> recJList;
	private JList<Patient> recJListAll;
	private JList<Patient> nurJList;
	private JList<Patient> docJList;
	private JList<Patient> nurJListAll;
	private JList<Patient> docJListAll;
	
	private JTextArea nur_Cond_TA;
	private JTextArea nur_Vital_TA;
	private JTextArea nur_Treat_TA;
	private JTextArea nurSP_Cond_TA;
	private JTextArea nurSP_Vital_TA;
	private JTextArea nurSP_Treat_TA;
	private JTextField doc_FN_TF;
	private JTextField doc_LN_TF;
	private JTextField doc_DOB_TF;
	private JTextField docSP_FN_TF;
	private JTextField docSP_LN_TF;
	private JTextField docSP_DOB_TF;
	private JTextArea doc_Cond_TA;
	private JTextArea doc_Vital_TA;
	private JTextArea doc_Treat_TA;
	private JTextArea docSP_Cond_TA;
	private JTextArea docSP_Vital_TA;
	private JTextArea docSP_Treat_TA;
	private JLabel docSP_Prior_Lbl;
	private JTabbedPane doc_List_TP;
	private JLabel nurSP_Prior_Lbl;
	private JTabbedPane nur_List_TP;
	private JLabel nur_Notice_Lbl;
	private JLabel doc_Notice_Lbl;
	private JTabbedPane recList_TP;
	private JTextArea recSP_Vital_TA;
	private JTextArea recSP_Treat_TA;
	
	
	

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUI window = new GUI();
					window.frame.setVisible(true);
					
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public GUI() {
		initialize();

	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		
		
		frame = new JFrame();
		frame.setResizable(false);
		frame.setBounds(100, 100, 1000, 650);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(new CardLayout(0, 0));
		
		mainPanel = new JPanel();
		frame.getContentPane().add(mainPanel, "name_69450666164772");
		mainPanel.setLayout(null);
		
		receptionPanel = new JPanel();
		receptionPanel.setFont(new Font("Tahoma", Font.PLAIN, 11));
		receptionPanel.setToolTipText("");
		frame.getContentPane().add(receptionPanel, "name_69453374820090");
		
		// opens reception panel
		JButton receptionBtn = new JButton("RECEPTION");
		receptionBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				receptionPanel.setVisible(true);
				mainPanel.setVisible(false);
				
				//getting values from DB if DoubleLinkedList is empty
				if(dll.size()==0){
					
					db.load(dll, "fifo");
					
				}
				
				addToJList(recJList, dll);
			}
		});
		receptionBtn.setFont(new Font("Century Gothic", Font.BOLD, 20));
		receptionBtn.setBounds(105, 280, 230, 100);
		mainPanel.add(receptionBtn);
		
		// opens nurse panel
		JButton nurseBtn = new JButton("NURSE");
		nurseBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				nursePanel.setVisible(true);
				mainPanel.setVisible(false);
				// remove selection from priority checkbox
				nurPrior_CB.setSelectedIndex(-1);
				
				//getting values from DB if list is empty
				if(dll.size()==0){
					db.load(dll, "fifo");
				}
				
				addToJList(nurJList, dll);
			}
		});
		nurseBtn.setFont(new Font("Century Gothic", Font.BOLD, 20));
		nurseBtn.setBounds(381, 280, 230, 100);
		mainPanel.add(nurseBtn);
		
		// opens doctor panel
		JButton doctorBtn = new JButton("DOCTOR");
		doctorBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				doctorPanel.setVisible(true);
				mainPanel.setVisible(false);
				
				// if patients exists in DLL, empty DLL, so no duplicates will be in list
				if(dllSorted.size() > 0){
					dllSorted.empty();
				}
				// load patients to queue DLL
				db.load(dllSorted, "priority");
				
				// load ALL patients
				//db.loadAlltoGUI(docJListAll);
				
				// adding DLL to JList
				addToJList(docJList, dllSorted);
			}
		});
		doctorBtn.setFont(new Font("Century Gothic", Font.BOLD, 20));
		doctorBtn.setBounds(660, 280, 230, 100);
		mainPanel.add(doctorBtn);
		
		JLabel lblMainTitle = new JLabel("A&E Patient Management System");
		lblMainTitle.setFont(new Font("SansSerif", Font.BOLD, 35));
		lblMainTitle.setHorizontalAlignment(SwingConstants.CENTER);
		lblMainTitle.setBounds(164, 27, 626, 62);
		mainPanel.add(lblMainTitle);
		
		JLabel lblMainLbl = new JLabel("Please, select your department:");
		lblMainLbl.setFont(new Font("Yu Gothic Medium", Font.PLAIN, 25));
		lblMainLbl.setHorizontalAlignment(SwingConstants.CENTER);
		lblMainLbl.setBounds(289, 214, 403, 47);
		mainPanel.add(lblMainLbl);
		receptionPanel.setLayout(null);
		
		
		
		JLabel rec_PatDet_Lbl = new JLabel("New Patient Details:");
		rec_PatDet_Lbl.setFont(new Font("Arial Black", Font.PLAIN, 14));
		rec_PatDet_Lbl.setBounds(30, 73, 237, 33);
		receptionPanel.add(rec_PatDet_Lbl);
		
		JLabel rec_FN_Lbl = new JLabel("Firstname:");
		rec_FN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		rec_FN_Lbl.setBounds(30, 137, 103, 14);
		receptionPanel.add(rec_FN_Lbl);
		
		JLabel rec_LN_Lbl = new JLabel("Lastname:");
		rec_LN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		rec_LN_Lbl.setBounds(30, 168, 103, 14);
		receptionPanel.add(rec_LN_Lbl);
		
		JLabel rec_DOB_Lbl = new JLabel("Date of birth:");
		rec_DOB_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		rec_DOB_Lbl.setBounds(30, 209, 103, 14);
		receptionPanel.add(rec_DOB_Lbl);
		
		JLabel rec_Cond_Lbl = new JLabel("Patient Condition:");
		rec_Cond_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		rec_Cond_Lbl.setBounds(30, 251, 103, 14);
		receptionPanel.add(rec_Cond_Lbl);
		
		recFN_TF = new JTextField();
		recFN_TF.setBounds(143, 131, 161, 20);
		receptionPanel.add(recFN_TF);
		recFN_TF.setColumns(10);
		
		recLN_TF = new JTextField();
		recLN_TF.setBounds(143, 165, 161, 20);
		receptionPanel.add(recLN_TF);
		recLN_TF.setColumns(10);
		
		recDOB_TF = new JTextField();
		recDOB_TF.setBounds(143, 206, 161, 20);
		receptionPanel.add(recDOB_TF);
		recDOB_TF.setColumns(10);
		
		JButton recSave_Btn = new JButton("SAVE");
		recSave_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		recSave_Btn.setBounds(180, 380, 124, 40);
		recSave_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
				if(recFN_TF.getText().isEmpty() || recLN_TF.getText().isEmpty() || recDOB_TF.getText().isEmpty() || recCondition_TA.getText().isEmpty()){
					
					JOptionPane.showMessageDialog(frame, "Patient fieds cannot be blank");
				}
				
				else{
					
					String fname = recFN_TF.getText();
					String lname = recLN_TF.getText();
					String dob = recDOB_TF.getText();
					String cond = recCondition_TA.getText();
					
					// if not edit, create new patient object
					if(!isEdit){
						Patient p = new Patient(fname, lname, dob, cond);
						//adding to list
						dll.add(p);
						
						//saving to DB
						db.saveToDB(p);
						
						//display new list
						recJList.clearSelection();
						addToJList(recJList, dll);
						
						// display notice
						rec_Notice_Lbl.setText("Patient created successfully.");
						
						
						
					}
					// updating existing patient
					else{
						editPatient.firstName = fname;
						editPatient.lastName = lname;
						editPatient.dob = dob;
						editPatient.condition = cond;
						
						// update in DB
						db.update(editPatient);
						
						if(isQueueList){
							// updating JList
							recJList.clearSelection();
							addToJList(recJList, dll);
							
						}
						
						else{
							// updating All patients list
							recJListAll.clearSelection();
							addToJList(recJListAll, dllAll);
						}
						
						isEdit = false;
						
						// display notice
						rec_Notice_Lbl.setText("Patient updated successfully.");
						
					}
					// clear notice Label
					runTimer(rec_Notice_Lbl);
					
					//clear fields after saving
					clear("recPanel");
				}
				
			}
		});
		receptionPanel.add(recSave_Btn);
		
		// actions on pressing CLOSE button for registration panel
		JButton recClose_Btn = new JButton("CLOSE");
		recClose_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		recClose_Btn.setBounds(30, 380, 124, 40);
		recClose_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mainPanel.setVisible(true);
				receptionPanel.setVisible(false);
				// make tabbed pane select queue list
				recList_TP.setSelectedIndex(0);
				clear("recPanel");
			}
		});
		receptionPanel.add(recClose_Btn);
		
		// models for JLists
		listModel = new DefaultListModel<>();
		doclistModel = new DefaultListModel<>();
		listModelAll = new DefaultListModel<>();
		
		JPanel rec_SelectPat_Pan = new JPanel();
		rec_SelectPat_Pan.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		rec_SelectPat_Pan.setBounds(358, 74, 358, 381);
		receptionPanel.add(rec_SelectPat_Pan);
		rec_SelectPat_Pan.setLayout(null);
		
		JLabel recSP_Main_Lbl = new JLabel("Selected Patient");
		recSP_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 14));
		recSP_Main_Lbl.setBounds(129, 11, 124, 20);
		rec_SelectPat_Pan.add(recSP_Main_Lbl);
		
		JLabel recSP_FN_Lbl = new JLabel("Firstname:");
		recSP_FN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_FN_Lbl.setBounds(10, 49, 68, 14);
		rec_SelectPat_Pan.add(recSP_FN_Lbl);
		
		JLabel recSP_LN_Lbl = new JLabel("Lastname:");
		recSP_LN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_LN_Lbl.setBounds(10, 74, 68, 14);
		rec_SelectPat_Pan.add(recSP_LN_Lbl);
		
		JLabel recSP_DOB_Lbl = new JLabel("Date of birth:");
		recSP_DOB_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_DOB_Lbl.setBounds(10, 99, 78, 14);
		rec_SelectPat_Pan.add(recSP_DOB_Lbl);
		
		JLabel recSP_Vital_Lbl = new JLabel("Vital signs:");
		recSP_Vital_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_Vital_Lbl.setBounds(10, 191, 68, 14);
		rec_SelectPat_Pan.add(recSP_Vital_Lbl);
		
		recSP_FN_TF = new JTextField();
		recSP_FN_TF.setEditable(false);
		recSP_FN_TF.setBounds(101, 47, 165, 20);
		rec_SelectPat_Pan.add(recSP_FN_TF);
		recSP_FN_TF.setColumns(10);
		
		recSP_LN_TF = new JTextField();
		recSP_LN_TF.setEditable(false);
		recSP_LN_TF.setBounds(101, 72, 165, 20);
		rec_SelectPat_Pan.add(recSP_LN_TF);
		recSP_LN_TF.setColumns(10);
		
		recSP_DOB_TF = new JTextField();
		recSP_DOB_TF.setEditable(false);
		recSP_DOB_TF.setBounds(101, 97, 165, 20);
		rec_SelectPat_Pan.add(recSP_DOB_TF);
		recSP_DOB_TF.setColumns(10);
		
		JScrollPane recSP_Vital_ScrollP = new JScrollPane();
		recSP_Vital_ScrollP.setBounds(88, 191, 210, 65);
		rec_SelectPat_Pan.add(recSP_Vital_ScrollP);
		
		recSP_Vital_TA = new JTextArea();
		recSP_Vital_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		recSP_Vital_ScrollP.setViewportView(recSP_Vital_TA);
		recSP_Vital_TA.setEditable(false);
		
		JLabel recSP_Treat_Lbl = new JLabel("Treatment:");
		recSP_Treat_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_Treat_Lbl.setBounds(10, 267, 78, 14);
		rec_SelectPat_Pan.add(recSP_Treat_Lbl);
		
		JScrollPane recSP_Treat_ScrollP = new JScrollPane();
		recSP_Treat_ScrollP.setBounds(88, 267, 210, 65);
		rec_SelectPat_Pan.add(recSP_Treat_ScrollP);
		
		recSP_Treat_TA = new JTextArea();
		recSP_Treat_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		recSP_Treat_ScrollP.setViewportView(recSP_Treat_TA);
		recSP_Treat_TA.setEditable(false);
		
		JLabel recSP_Cond_Lbl = new JLabel("Condition:");
		recSP_Cond_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		recSP_Cond_Lbl.setBounds(10, 124, 78, 14);
		rec_SelectPat_Pan.add(recSP_Cond_Lbl);
		
		JScrollPane recSP_Cond_ScrollP = new JScrollPane();
		recSP_Cond_ScrollP.setBounds(88, 127, 210, 53);
		rec_SelectPat_Pan.add(recSP_Cond_ScrollP);
		
		recSP_Cond_TA = new JTextArea();
		recSP_Cond_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		recSP_Cond_ScrollP.setViewportView(recSP_Cond_TA);
		recSP_Cond_TA.setEditable(false);
		
		recSP_Priority_Lbl = new JLabel("");
		recSP_Priority_Lbl.setFont(new Font("Verdana", Font.BOLD, 14));
		recSP_Priority_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		recSP_Priority_Lbl.setBounds(88, 343, 210, 27);
		rec_SelectPat_Pan.add(recSP_Priority_Lbl);
		
		JScrollPane recCond_ScrollP = new JScrollPane();
		recCond_ScrollP.setBounds(30, 276, 274, 78);
		receptionPanel.add(recCond_ScrollP);
		
		recCondition_TA = new JTextArea();
		recCondition_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		recCond_ScrollP.setViewportView(recCondition_TA);
		
		JLabel recList_Lbl = new JLabel("Patients list");
		recList_Lbl.setFont(new Font("Arial", Font.BOLD, 12));
		recList_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		recList_Lbl.setBounds(763, 50, 146, 14);
		receptionPanel.add(recList_Lbl);
		
		/*
		 *  delete patient from queue, I decided for better data persistence not allow users to delete patients from Database,
		 *  instead patient can be deleted from queue, that makes to set his discharged flag to 1(true) and update value in Database,
		 *  so patient won't be displayed in queue list.
		 *  As there is an Edit function available, any patient data can be changed instead of deletion.
		 */

		recDelete_Btn = new JButton("Delete patient");
		recDelete_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!recJList.isSelectionEmpty()){
					
					editPatient = recJList.getSelectedValue();
					editPatient.discharged = 1;
					editPatient.treatment = ">>> Had been deleted from initial queue <<<";
					db.update(editPatient);
					
					// delete from DLL list
					dll.delete(recJList.getSelectedIndex()+1);
					recJList.clearSelection();
					
					// add updated list to JList
					addToJList(recJList, dll);
					
					rec_Notice_Lbl.setText("Patient deleted from queue!");
					runTimer(rec_Notice_Lbl);
				}
				
				else if(!recJListAll.isSelectionEmpty()){
					
					JOptionPane.showMessageDialog(recJListAll, "Can only delete from the queue.", "Error", JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});
		recDelete_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		recDelete_Btn.setBounds(784, 462, 136, 33);
		receptionPanel.add(recDelete_Btn);
		
		// edit selected patient
		recEdit_Btn = new JButton("EDIT");
		recEdit_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		recEdit_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// checking which list is selected
				if(!recJList.isSelectionEmpty()){
					editPatient = recJList.getSelectedValue();
					isQueueList = true;
				}
				else if(!recJListAll.isSelectionEmpty()){
					editPatient = recJListAll.getSelectedValue();
					isQueueList = false;
				}
				if(!recJList.isSelectionEmpty() || !recJListAll.isSelectionEmpty()){
					
					recFN_TF.setText(editPatient.firstName);
					recLN_TF.setText(editPatient.lastName);
					recDOB_TF.setText(editPatient.dob);
					recCondition_TA.setText(editPatient.condition);
					isEdit = true;
				}
			}
		});
		recEdit_Btn.setBounds(549, 462, 124, 33);
		receptionPanel.add(recEdit_Btn);
		
		JButton recClear_Btn = new JButton("CLEAR");
		recClear_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clear("recPanel");
			}
		});
		recClear_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		recClear_Btn.setBounds(380, 462, 124, 33);
		receptionPanel.add(recClear_Btn);
		
		rec_Notice_Lbl = new JLabel("");
		
		rec_Notice_Lbl.setFont(new Font("Arial", Font.PLAIN, 16));
		rec_Notice_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		rec_Notice_Lbl.setBounds(227, 547, 543, 33);
		receptionPanel.add(rec_Notice_Lbl);
		
		JLabel rec_Main_Lbl = new JLabel("Reception Patient Management");
		rec_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 22));
		rec_Main_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		rec_Main_Lbl.setBounds(358, 11, 358, 28);
		receptionPanel.add(rec_Main_Lbl);
		
		recList_TP = new JTabbedPane(JTabbedPane.TOP);
		recList_TP.setFont(new Font("Arial", Font.BOLD, 12));
		recList_TP.setBounds(744, 74, 210, 381);
		receptionPanel.add(recList_TP);
		
		JScrollPane recList_ScrollP = new JScrollPane();
		recList_TP.addTab("Queue", null, recList_ScrollP, null);
		recJList = new JList<>(listModel);
		recList_ScrollP.setViewportView(recJList);
		recJList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!recJList.isSelectionEmpty()){
					Patient p = recJList.getSelectedValue();
					recSP_FN_TF.setText(p.firstName);
					recSP_LN_TF.setText(p.lastName);
					recSP_DOB_TF.setText(p.dob);
					recSP_Cond_TA.setText(p.condition);
					recSP_Vital_TA.setText(p.vitalSigns);
					recSP_Treat_TA.setText(p.treatment);
				}
				return;
			}
		});
		recJList.setFont(new Font("Times New Roman", Font.PLAIN, 14));
		recJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		
		JScrollPane recListAll_SP = new JScrollPane();
		recList_TP.addTab("All", null, recListAll_SP, null);
		
		recJListAll = new JList<Patient>(listModelAll);
		recJListAll.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!recJListAll.isSelectionEmpty()){
					Patient p = recJListAll.getSelectedValue();
					recSP_FN_TF.setText(p.firstName);
					recSP_LN_TF.setText(p.lastName);
					recSP_DOB_TF.setText(p.dob);
					recSP_Cond_TA.setText(p.condition);
					recSP_Vital_TA.setText(p.vitalSigns);
					recSP_Treat_TA.setText(p.treatment);

				}
				return;
			}
		});
		recJListAll.setFont(new Font("Times New Roman", Font.PLAIN, 14));
		recJListAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		recListAll_SP.setViewportView(recJListAll);
		
		JButton rec_ReturnPatient_Btn = new JButton("Return to queue");
		rec_ReturnPatient_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// no patient from ALL list selected
				if(recJListAll.isSelectionEmpty()){
					JOptionPane.showMessageDialog(frame, "Please select discharged patient", "Error", JOptionPane.ERROR_MESSAGE);
				}
				// patient selected
				else{
					// confirmation dialog
					int dialogButton = JOptionPane.YES_NO_OPTION;
					int dialogResult = JOptionPane.showConfirmDialog(frame, "Are you sure, you want to put selected patient back to queue?", "Confirm", dialogButton);
					
					// if YES - changing discharged to 0 and updating lists
					if(dialogResult == 0){
						editPatient = recJListAll.getSelectedValue();
						editPatient.discharged = 0;
						
						// DB
						db.update(editPatient);
						
						// DLL lists
						dllAll.delete(recJListAll.getSelectedIndex()+1);
						dll.add(editPatient);
						
						// JLists
						recJListAll.clearSelection();
						addToJList(recJListAll, dllAll);
						
						addToJList(recJList, dll);
						
						rec_Notice_Lbl.setText("Moved back to queue");
						runTimer(rec_Notice_Lbl);
						
					}
					// NO
					else{
						//clear list selection
						recJListAll.clearSelection();
						
						rec_Notice_Lbl.setText("Action cancelled");
						runTimer(rec_Notice_Lbl);
					}
				}
			}
		});
		rec_ReturnPatient_Btn.setToolTipText("Puts discharged patient back to initial queue");
		rec_ReturnPatient_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		rec_ReturnPatient_Btn.setBounds(784, 506, 136, 33);
		receptionPanel.add(rec_ReturnPatient_Btn);
		
		// listener for registration Tabbed Pane selection
		recList_TP.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(recList_TP.getSelectedIndex()==0){
	        		recJListAll.clearSelection();
	        	}
	        	// clicked to show list of all patients
	        	if(recList_TP.getSelectedIndex()==1){
	        		recJList.clearSelection();
	        		
	        		if(dllAll.size() > 0){
	        			dllAll.empty();
	        		}
	        		db.load(dllAll, "getAll");
	        		addToJList(recJListAll, dllAll);
	        	}
				
			}
		});
		
		/*
		 *  Nurse Panel
		 */
		
		nursePanel = new JPanel();
		frame.getContentPane().add(nursePanel, "name_69455965404928");
		nursePanel.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setLayout(null);
		panel.setToolTipText("");
		panel.setFont(new Font("Tahoma", Font.PLAIN, 11));
		panel.setBounds(0, 0, 994, 621);
		nursePanel.add(panel);
		
		JLabel nur_PD_Lbl = new JLabel("Patient Details");
		nur_PD_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		nur_PD_Lbl.setFont(new Font("Arial Black", Font.PLAIN, 14));
		nur_PD_Lbl.setBounds(30, 24, 237, 33);
		panel.add(nur_PD_Lbl);
		
		JLabel nur_FN_Lbl = new JLabel("Firstname:");
		nur_FN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		nur_FN_Lbl.setBounds(30, 74, 103, 14);
		panel.add(nur_FN_Lbl);
		
		JLabel nur_LN_Lbl = new JLabel("Lastname:");
		nur_LN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		nur_LN_Lbl.setBounds(30, 99, 103, 14);
		panel.add(nur_LN_Lbl);
		
		JLabel nur_DOB_Lbl = new JLabel("Date of birth:");
		nur_DOB_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		nur_DOB_Lbl.setBounds(30, 124, 103, 14);
		panel.add(nur_DOB_Lbl);
		
		JLabel nur_Cond_Lbl = new JLabel("Patient Condition:");
		nur_Cond_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		nur_Cond_Lbl.setBounds(30, 149, 103, 14);
		panel.add(nur_Cond_Lbl);
		
		nur_FN_TF = new JTextField();
		nur_FN_TF.setEditable(false);
		nur_FN_TF.setColumns(10);
		nur_FN_TF.setBounds(143, 72, 161, 20);
		panel.add(nur_FN_TF);
		
		nur_LN_TF = new JTextField();
		nur_LN_TF.setEditable(false);
		nur_LN_TF.setColumns(10);
		nur_LN_TF.setBounds(143, 97, 161, 20);
		panel.add(nur_LN_TF);
		
		nur_DOB_TF = new JTextField();
		nur_DOB_TF.setEditable(false);
		nur_DOB_TF.setColumns(10);
		nur_DOB_TF.setBounds(143, 122, 161, 20);
		panel.add(nur_DOB_TF);
		
		// save patient data
		JButton nur_Save_Btn = new JButton("SAVE");
		nur_Save_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(nur_FN_TF.getText().isEmpty() || nur_LN_TF.getText().isEmpty() || nur_DOB_TF.getText().isEmpty() || nur_Cond_TA.getText().isEmpty() ||
						nur_Vital_TA.getText().isEmpty()){
					
					JOptionPane.showMessageDialog(frame, "Patient fieds cannot be blank");
				}
				// priority not selected and this patient is from queue
				else if(nurPrior_CB.getSelectedIndex() == -1 && isQueueList == true){
					
					JOptionPane.showMessageDialog(frame, "Select Queue Priority!");
				}
				else{
					
					String fname = nur_FN_TF.getText();
					String lname = nur_LN_TF.getText();
					String dob = nur_DOB_TF.getText();
					String cond = nur_Cond_TA.getText();
					String vital = nur_Vital_TA.getText();
					
					if(isQueueList == true){
						int priority = (int) nurPrior_CB.getSelectedItem();
						editPatient.priority = priority;
					}
					
					
					editPatient.firstName = fname;
					editPatient.lastName = lname;
					editPatient.dob = dob;
					editPatient.condition = cond;
					editPatient.vitalSigns = vital;
					
					
					// update in DB
					db.update(editPatient);
					
					if(isQueueList == true){
						// delete from initial queue list as priority has been set
						dll.delete(nurJList.getSelectedIndex()+1);
						
						// updating JList
						nurJList.clearSelection();
						addToJList(nurJList, dll);
						
						nur_Notice_Lbl.setText("Patient updated and added to priority queue.");
					}
					//false
					else{
						// updating JList
						nurJListAll.clearSelection();
						addToJList(nurJListAll, dllAll);
						
						nur_Notice_Lbl.setText("Patient updated successfully.");
					}
					
					runTimer(nur_Notice_Lbl);
					
					isEdit = false;
					
					clear("nurPanel");
					
				}
			}
		});
		nur_Save_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		nur_Save_Btn.setBounds(386, 466, 124, 40);
		panel.add(nur_Save_Btn);
		
		JButton nur_Close_Btn = new JButton("CLOSE");
		nur_Close_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mainPanel.setVisible(true);
				nursePanel.setVisible(false);
				
				// set tab to first list - queue
				nur_List_TP.setSelectedIndex(0);
				
				clear("nurPanel");
			}
		});
		nur_Close_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		nur_Close_Btn.setBounds(31, 517, 124, 40);
		panel.add(nur_Close_Btn);
		
		JPanel panel_1 = new JPanel();
		panel_1.setLayout(null);
		panel_1.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel_1.setBounds(358, 74, 358, 381);
		panel.add(panel_1);
		
		JLabel nur_SP_Main_Lbl = new JLabel("Selected Patient");
		nur_SP_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 14));
		nur_SP_Main_Lbl.setBounds(129, 11, 124, 20);
		panel_1.add(nur_SP_Main_Lbl);
		
		JLabel nurSP_FN_Lbl = new JLabel("Firstname:");
		nurSP_FN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_FN_Lbl.setBounds(10, 49, 68, 14);
		panel_1.add(nurSP_FN_Lbl);
		
		JLabel nurSP_LN_Lbl = new JLabel("Lastname:");
		nurSP_LN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_LN_Lbl.setBounds(10, 74, 68, 14);
		panel_1.add(nurSP_LN_Lbl);
		
		JLabel nurSP_DOB_Lbl = new JLabel("Date of birth:");
		nurSP_DOB_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_DOB_Lbl.setBounds(10, 99, 78, 14);
		panel_1.add(nurSP_DOB_Lbl);
		
		JLabel nurSP_Vital_Lbl = new JLabel("Vital signs:");
		nurSP_Vital_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_Vital_Lbl.setBounds(10, 191, 68, 14);
		panel_1.add(nurSP_Vital_Lbl);
		
		nurSP_FN_TF = new JTextField();
		nurSP_FN_TF.setEditable(false);
		nurSP_FN_TF.setColumns(10);
		nurSP_FN_TF.setBounds(101, 47, 165, 20);
		panel_1.add(nurSP_FN_TF);
		
		nurSP_LN_TF = new JTextField();
		nurSP_LN_TF.setEditable(false);
		nurSP_LN_TF.setColumns(10);
		nurSP_LN_TF.setBounds(101, 72, 165, 20);
		panel_1.add(nurSP_LN_TF);
		
		nurSP_DOB_TF = new JTextField();
		nurSP_DOB_TF.setEditable(false);
		nurSP_DOB_TF.setColumns(10);
		nurSP_DOB_TF.setBounds(101, 97, 165, 20);
		panel_1.add(nurSP_DOB_TF);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(88, 191, 240, 65);
		panel_1.add(scrollPane_1);
		
		nurSP_Vital_TA = new JTextArea();
		nurSP_Vital_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		nurSP_Vital_TA.setEditable(false);
		scrollPane_1.setViewportView(nurSP_Vital_TA);
		
		JLabel nurSP_Treat_Lbl = new JLabel("Treatment:");
		nurSP_Treat_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_Treat_Lbl.setBounds(10, 267, 78, 14);
		panel_1.add(nurSP_Treat_Lbl);
		
		JScrollPane scrollPane_2 = new JScrollPane();
		scrollPane_2.setBounds(88, 267, 240, 65);
		panel_1.add(scrollPane_2);
		
		nurSP_Treat_TA = new JTextArea();
		nurSP_Treat_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		nurSP_Treat_TA.setEditable(false);
		scrollPane_2.setViewportView(nurSP_Treat_TA);
		
		JLabel nurSP_Cond_Lbl = new JLabel("Condition:");
		nurSP_Cond_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		nurSP_Cond_Lbl.setBounds(10, 124, 78, 14);
		panel_1.add(nurSP_Cond_Lbl);
		
		JScrollPane scrollPane_3 = new JScrollPane();
		scrollPane_3.setBounds(88, 127, 240, 53);
		panel_1.add(scrollPane_3);
		
		nurSP_Cond_TA = new JTextArea();
		nurSP_Cond_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		nurSP_Cond_TA.setEditable(false);
		scrollPane_3.setViewportView(nurSP_Cond_TA);
		
		nurSP_Prior_Lbl = new JLabel("");
		nurSP_Prior_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		nurSP_Prior_Lbl.setFont(new Font("Verdana", Font.BOLD, 14));
		nurSP_Prior_Lbl.setBounds(88, 343, 210, 27);
		panel_1.add(nurSP_Prior_Lbl);
		
		JLabel lblPatientsList = new JLabel("Patients list");
		lblPatientsList.setHorizontalAlignment(SwingConstants.CENTER);
		lblPatientsList.setFont(new Font("Arial", Font.BOLD, 12));
		lblPatientsList.setBounds(784, 47, 146, 14);
		panel.add(lblPatientsList);
		
		/*
		 *  delete patient from queue, I decided for better data persistence not allow users to delete patients from Database,
		 *  instead patient can be deleted from queue, that makes to set his discharged flag to 1(true) and update value in Database,
		 *  so patient won't be displayed in queue list.
		 *  As there is an Edit function available, any patient data can be changed instead of deletion.
		 */
		
		JButton nur_Delete_Btn = new JButton("Delete from queue");
		nur_Delete_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// if selected patient from "All patients list"
				if(!nurJListAll.isSelectionEmpty()){
					JOptionPane.showMessageDialog(nurJListAll, "Can only delete patients from the queue!", "Error", JOptionPane.INFORMATION_MESSAGE);
				}
				// no patient selected
				else if(nurJList.isSelectionEmpty() && nurJListAll.isSelectionEmpty()){
					JOptionPane.showMessageDialog(frame, "Please, select patient from the queue.", "Error", JOptionPane.INFORMATION_MESSAGE);
				}
				// correct list
				if(!nurJList.isSelectionEmpty()){
					
					int dialogButton = JOptionPane.YES_NO_OPTION;
					int dialogResult = JOptionPane.showConfirmDialog(frame, "Are you sure to delete patient from the queue?", "Delete patient", dialogButton);
					
					// YES
					if (dialogResult == 0){
						
						editPatient = nurJList.getSelectedValue();
						editPatient.discharged = 1;
						editPatient.treatment = ">>> Had been deleted from the initial queue <<<";
						db.update(editPatient);
						
						// delete from DLL list
						dll.delete(nurJList.getSelectedIndex()+1);
						nurJList.clearSelection();
						
						// add updated list to JList
						addToJList(nurJList, dll);
						
						nur_Notice_Lbl.setText("Patient deleted from the queue!");
						runTimer(nur_Notice_Lbl);
					}
					// NO
					else{
						
						nur_Notice_Lbl.setText("Action cancelled");
						runTimer(nur_Notice_Lbl);
					}
					
				}
			}
		});
		nur_Delete_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		nur_Delete_Btn.setBounds(774, 462, 146, 33);
		panel.add(nur_Delete_Btn);
		
		
		// get selected patient for edit
		JButton nur_Edit_Btn = new JButton("EDIT");
		nur_Edit_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!nurJList.isSelectionEmpty()){
					editPatient = nurJList.getSelectedValue();
					isQueueList = true;
				}
				else if(!nurJListAll.isSelectionEmpty()){
					editPatient = nurJListAll.getSelectedValue();
					isQueueList = false;
				}
				if(!nurJList.isSelectionEmpty() || !nurJListAll.isSelectionEmpty()){
					
					nur_FN_TF.setText(editPatient.firstName);
					nur_LN_TF.setText(editPatient.lastName);
					nur_DOB_TF.setText(editPatient.dob);
					nur_Cond_TA.setText(editPatient.condition);
					nur_Vital_TA.setText(editPatient.vitalSigns);
					nur_Treat_TA.setText(editPatient.treatment);
					isEdit = true;
					
					// enable fields for edit while patient is selected
					nur_FN_TF.setEditable(true);
					nur_LN_TF.setEditable(true);
					nur_DOB_TF.setEditable(true);
					nur_Cond_TA.setEditable(true);
					nur_Vital_TA.setEditable(true);
				}
					
				
			}
		});
		
		nur_Edit_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		nur_Edit_Btn.setBounds(566, 466, 124, 40);
		panel.add(nur_Edit_Btn);
		
		JButton nur_Clear_Btn = new JButton("CLEAR");
		nur_Clear_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clear("nurPanel");
			}
		});
		nur_Clear_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		nur_Clear_Btn.setBounds(180, 517, 124, 40);
		panel.add(nur_Clear_Btn);
		
		nur_Notice_Lbl = new JLabel("");
		nur_Notice_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		nur_Notice_Lbl.setFont(new Font("Arial", Font.PLAIN, 16));
		nur_Notice_Lbl.setBounds(223, 566, 543, 33);
		panel.add(nur_Notice_Lbl);
		
		JLabel lblVitalSigns = new JLabel("Vital signs:");
		lblVitalSigns.setFont(new Font("Arial", Font.PLAIN, 12));
		lblVitalSigns.setBounds(30, 261, 103, 14);
		panel.add(lblVitalSigns);
		
		JScrollPane scrollPane_5 = new JScrollPane();
		scrollPane_5.setBounds(30, 286, 272, 76);
		panel.add(scrollPane_5);
		
		nur_Vital_TA = new JTextArea();
		nur_Vital_TA.setEditable(false);
		nur_Vital_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		scrollPane_5.setViewportView(nur_Vital_TA);
		
		JScrollPane scrollPane_4 = new JScrollPane();
		scrollPane_4.setBounds(30, 174, 272, 76);
		panel.add(scrollPane_4);
		
		nur_Cond_TA = new JTextArea();
		nur_Cond_TA.setEditable(false);
		nur_Cond_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		scrollPane_4.setViewportView(nur_Cond_TA);
		
		JLabel lblTreatment = new JLabel("Treatment:");
		lblTreatment.setFont(new Font("Arial", Font.PLAIN, 12));
		lblTreatment.setBounds(30, 373, 103, 14);
		panel.add(lblTreatment);
		
		nur_List_TP = new JTabbedPane(JTabbedPane.TOP);
		nur_List_TP.setFont(new Font("Arial", Font.BOLD, 12));
		nur_List_TP.setBounds(746, 74, 210, 381);
		panel.add(nur_List_TP);
		
		JScrollPane scrollPane = new JScrollPane();
		nur_List_TP.addTab("Queue", null, scrollPane, "Patients in Queue");
		
		// Jlist listener to display selected patient
		nurJList = new JList<Patient>(listModel);
		nurJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		nurJList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!nurJList.isSelectionEmpty()){
					Patient p = nurJList.getSelectedValue();
					nurSP_FN_TF.setText(p.firstName);
					nurSP_LN_TF.setText(p.lastName);
					nurSP_DOB_TF.setText(p.dob);
					nurSP_Cond_TA.setText(p.condition);
					nurSP_Vital_TA.setText(p.vitalSigns);
					nurSP_Treat_TA.setText(p.treatment);
					nurSP_Prior_Lbl.setText("Priority: " + p.getPriority());
				}
				return;
			}
		});
		nurJList.setFont(new Font("Franklin Gothic Demi", Font.PLAIN, 14));
		scrollPane.setViewportView(nurJList);
		
		JScrollPane scrollPane_7 = new JScrollPane();
		nur_List_TP.addTab("All", null, scrollPane_7, "All Registered Patients");
		
		nurJListAll = new JList<Patient>(listModelAll);
		nurJListAll.setFont(new Font("Franklin Gothic Demi", Font.PLAIN, 14));
		nurJListAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		nurJListAll.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!nurJListAll.isSelectionEmpty()){
					Patient p = nurJListAll.getSelectedValue();
					nurSP_FN_TF.setText(p.firstName);
					nurSP_LN_TF.setText(p.lastName);
					nurSP_DOB_TF.setText(p.dob);
					nurSP_Cond_TA.setText(p.condition);
					nurSP_Vital_TA.setText(p.vitalSigns);
					nurSP_Treat_TA.setText(p.treatment);
					nurSP_Prior_Lbl.setText("Priority: " + p.getPriority());
				}
				return;
			}
		});
		scrollPane_7.setViewportView(nurJListAll);
		
		// lister for Nurse tabbed pane, to load second list
		nur_List_TP.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				if(nur_List_TP.getSelectedIndex()==0){
	        		nurJListAll.clearSelection();
	        	}
	        	// clicked to show list of all patients
	        	if(nur_List_TP.getSelectedIndex()==1){
	        		nurJList.clearSelection();
	        		
	        		if(dllAll.size() > 0){
	        			dllAll.empty();
	        		}
	        		db.load(dllAll, "getAll");
	        		addToJList(nurJListAll, dllAll);
	        	}
				
			}
		});
		
		nurPrior_CB = new JComboBox();
		nurPrior_CB.setFont(new Font("Arial", Font.BOLD, 12));
		nurPrior_CB.setModel(new DefaultComboBoxModel(new Integer[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
		nurPrior_CB.setBounds(196, 476, 39, 20);
		panel.add(nurPrior_CB);
		
		
		JLabel nurPrior_Lbl = new JLabel("Select Queue Priority");
		nurPrior_Lbl.setFont(new Font("Arial", Font.BOLD, 13));
		nurPrior_Lbl.setBounds(44, 478, 141, 17);
		panel.add(nurPrior_Lbl);
		
		JScrollPane scrollPane_6 = new JScrollPane();
		scrollPane_6.setBounds(34, 398, 270, 72);
		panel.add(scrollPane_6);
		
		nur_Treat_TA = new JTextArea();
		nur_Treat_TA.setToolTipText("Editable by Doctor only");
		nur_Treat_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		nur_Treat_TA.setEditable(false);
		scrollPane_6.setViewportView(nur_Treat_TA);
		
		JLabel nur_Main_Lbl = new JLabel("Nurses Patient Management");
		nur_Main_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		nur_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 22));
		nur_Main_Lbl.setBounds(358, 11, 358, 28);
		panel.add(nur_Main_Lbl);
		
		
		// DOCTOR Panel
		doctorPanel = new JPanel();
		frame.getContentPane().add(doctorPanel, "name_69458082358523");
		doctorPanel.setLayout(null);
		
		JPanel panel_2 = new JPanel();
		panel_2.setLayout(null);
		panel_2.setToolTipText("");
		panel_2.setFont(new Font("Tahoma", Font.PLAIN, 11));
		panel_2.setBounds(0, 0, 994, 621);
		doctorPanel.add(panel_2);
		
		JLabel doc_PD_Lbl = new JLabel("Patient Details");
		doc_PD_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		doc_PD_Lbl.setFont(new Font("Arial Black", Font.PLAIN, 14));
		doc_PD_Lbl.setBounds(30, 24, 237, 33);
		panel_2.add(doc_PD_Lbl);
		
		JLabel doc_FN_Lbl = new JLabel("Firstname:");
		doc_FN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_FN_Lbl.setBounds(30, 74, 103, 14);
		panel_2.add(doc_FN_Lbl);
		
		JLabel doc_LN_Lbl = new JLabel("Lastname:");
		doc_LN_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_LN_Lbl.setBounds(30, 99, 103, 14);
		panel_2.add(doc_LN_Lbl);
		
		JLabel doc_DOB_Lbl = new JLabel("Date of birth:");
		doc_DOB_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_DOB_Lbl.setBounds(30, 124, 103, 14);
		panel_2.add(doc_DOB_Lbl);
		
		JLabel doc_Cond_Lbl = new JLabel("Patient Condition:");
		doc_Cond_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_Cond_Lbl.setBounds(30, 149, 103, 14);
		panel_2.add(doc_Cond_Lbl);
		
		doc_FN_TF = new JTextField();
		doc_FN_TF.setEditable(false);
		doc_FN_TF.setColumns(10);
		doc_FN_TF.setBounds(143, 72, 161, 20);
		panel_2.add(doc_FN_TF);
		
		doc_LN_TF = new JTextField();
		doc_LN_TF.setEditable(false);
		doc_LN_TF.setColumns(10);
		doc_LN_TF.setBounds(143, 97, 161, 20);
		panel_2.add(doc_LN_TF);
		
		doc_DOB_TF = new JTextField();
		doc_DOB_TF.setEditable(false);
		doc_DOB_TF.setColumns(10);
		doc_DOB_TF.setBounds(143, 122, 161, 20);
		panel_2.add(doc_DOB_TF);
		
		
		// Update selected patient
		JButton doc_Save_Btn = new JButton("SAVE");
		doc_Save_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(doc_FN_TF.getText().isEmpty() || doc_LN_TF.getText().isEmpty() || doc_DOB_TF.getText().isEmpty() || doc_Cond_TA.getText().isEmpty() ||
						doc_Vital_TA.getText().isEmpty() || doc_Treat_TA.getText().isEmpty()){
					
					JOptionPane.showMessageDialog(frame, "Patient fields cannot be blank");
				}
				
				else {
					String fname = doc_FN_TF.getText();
					String lname = doc_LN_TF.getText();
					String dob = doc_DOB_TF.getText();
					String cond = doc_Cond_TA.getText();
					String vital = doc_Vital_TA.getText();
					String treat = doc_Treat_TA.getText();
					
					editPatient.firstName = fname;
					editPatient.lastName = lname;
					editPatient.dob = dob;
					editPatient.condition = cond;
					editPatient.vitalSigns = vital;
					editPatient.treatment = treat;
					
					//set discharged to 1 and priority to 0 as patient removed from queue after treatment
					if(isQueueList==true){
						editPatient.discharged = 1;
						editPatient.priority = 0;
						
						// update in DB
						db.update(editPatient);
						
						// delete from queue list as priority has been set
						dllSorted.delete(docJList.getSelectedIndex()+1);
						
						// updating JList
						docJList.clearSelection();
						addToJList(docJList, dllSorted);
						
						// display notice
						doc_Notice_Lbl.setText("Patient discharged.");
						
					}
					// false
					else{
						// update in DB
						db.update(editPatient);
						
						// updating JList
						docJListAll.clearSelection();
						addToJList(docJListAll, dllAll);
						
						// display notice
						doc_Notice_Lbl.setText("Patient updated successfully.");
						
					}
					
					// clear notice Label
					runTimer(doc_Notice_Lbl);
					
					isEdit = false;
					
					clear("docPanel");
				}
			}
		});
		doc_Save_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		doc_Save_Btn.setBounds(386, 466, 124, 40);
		panel_2.add(doc_Save_Btn);
		
		JButton doc_Close_Btn = new JButton("CLOSE");
		doc_Close_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				mainPanel.setVisible(true);
				doctorPanel.setVisible(false);
				clear("docPanel");
				
				// switching tabs to queue list
				doc_List_TP.setSelectedIndex(0);
			}
		});
		doc_Close_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		doc_Close_Btn.setBounds(31, 517, 124, 40);
		panel_2.add(doc_Close_Btn);
		
		JPanel panel_3 = new JPanel();
		panel_3.setLayout(null);
		panel_3.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));
		panel_3.setBounds(358, 74, 358, 381);
		panel_2.add(panel_3);
		
		JLabel docSP_Main_Lbl = new JLabel("Selected Patient");
		docSP_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 14));
		docSP_Main_Lbl.setBounds(129, 11, 124, 20);
		panel_3.add(docSP_Main_Lbl);
		
		JLabel docSP_FN_Lbl = new JLabel("Firstname:");
		docSP_FN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_FN_Lbl.setBounds(10, 49, 68, 14);
		panel_3.add(docSP_FN_Lbl);
		
		JLabel docSP_LN_Lbl = new JLabel("Lastname:");
		docSP_LN_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_LN_Lbl.setBounds(10, 74, 68, 14);
		panel_3.add(docSP_LN_Lbl);
		
		JLabel docSP_DOB_Lbl = new JLabel("Date of birth:");
		docSP_DOB_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_DOB_Lbl.setBounds(10, 99, 78, 14);
		panel_3.add(docSP_DOB_Lbl);
		
		JLabel docSP_Vital_Lbl = new JLabel("Vital signs:");
		docSP_Vital_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_Vital_Lbl.setBounds(10, 191, 68, 14);
		panel_3.add(docSP_Vital_Lbl);
		
		docSP_FN_TF = new JTextField();
		docSP_FN_TF.setEditable(false);
		docSP_FN_TF.setColumns(10);
		docSP_FN_TF.setBounds(101, 47, 165, 20);
		panel_3.add(docSP_FN_TF);
		
		docSP_LN_TF = new JTextField();
		docSP_LN_TF.setEditable(false);
		docSP_LN_TF.setColumns(10);
		docSP_LN_TF.setBounds(101, 72, 165, 20);
		panel_3.add(docSP_LN_TF);
		
		docSP_DOB_TF = new JTextField();
		docSP_DOB_TF.setEditable(false);
		docSP_DOB_TF.setColumns(10);
		docSP_DOB_TF.setBounds(101, 97, 165, 20);
		panel_3.add(docSP_DOB_TF);
		
		JScrollPane scrollPane_8 = new JScrollPane();
		scrollPane_8.setBounds(88, 191, 240, 65);
		panel_3.add(scrollPane_8);
		
		docSP_Vital_TA = new JTextArea();
		docSP_Vital_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		docSP_Vital_TA.setEditable(false);
		scrollPane_8.setViewportView(docSP_Vital_TA);
		
		JLabel docSP_Treat_Lbl = new JLabel("Treatment:");
		docSP_Treat_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_Treat_Lbl.setBounds(10, 267, 78, 14);
		panel_3.add(docSP_Treat_Lbl);
		
		JScrollPane scrollPane_9 = new JScrollPane();
		scrollPane_9.setBounds(88, 267, 240, 65);
		panel_3.add(scrollPane_9);
		
		docSP_Treat_TA = new JTextArea();
		docSP_Treat_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		docSP_Treat_TA.setEditable(false);
		scrollPane_9.setViewportView(docSP_Treat_TA);
		
		JLabel docSP_Cond_Lbl = new JLabel("Condition:");
		docSP_Cond_Lbl.setFont(new Font("Century Gothic", Font.PLAIN, 12));
		docSP_Cond_Lbl.setBounds(10, 124, 78, 14);
		panel_3.add(docSP_Cond_Lbl);
		
		JScrollPane scrollPane_10 = new JScrollPane();
		scrollPane_10.setBounds(88, 127, 240, 53);
		panel_3.add(scrollPane_10);
		
		docSP_Cond_TA = new JTextArea();
		docSP_Cond_TA.setFont(new Font("Segoe UI Historic", Font.PLAIN, 12));
		docSP_Cond_TA.setEditable(false);
		scrollPane_10.setViewportView(docSP_Cond_TA);
		
		docSP_Prior_Lbl = new JLabel("");
		docSP_Prior_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		docSP_Prior_Lbl.setFont(new Font("Verdana", Font.BOLD, 14));
		docSP_Prior_Lbl.setBounds(88, 343, 210, 27);
		panel_3.add(docSP_Prior_Lbl);
		
		JLabel lblPatientsList_1 = new JLabel("Patients list");
		lblPatientsList_1.setHorizontalAlignment(SwingConstants.CENTER);
		lblPatientsList_1.setFont(new Font("Arial", Font.BOLD, 12));
		lblPatientsList_1.setBounds(784, 47, 146, 14);
		panel_2.add(lblPatientsList_1);
		
		/*
		 *  delete patient from queue, I decided for better data persistence not allow users to delete patients from Database,
		 *  instead patient can be deleted from queue, that makes to set his discharged flag to 1(true) and update value in Database,
		 *  so patient won't be displayed in queue list.
		 *  As there is an Edit function available, any patient data can be changed instead of deletion.
		 */
		JButton doc_Delete_Btn = new JButton("Delete from queue");
		doc_Delete_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// if selected patient from "All patients list"
				if(!docJListAll.isSelectionEmpty()){
					JOptionPane.showMessageDialog(docJListAll, "Can only delete patients from the queue!", "Error", JOptionPane.INFORMATION_MESSAGE);
				}
				// no patient selected
				else if(docJList.isSelectionEmpty() && docJListAll.isSelectionEmpty()){
					JOptionPane.showMessageDialog(frame, "Please, select patient from the queue.", "Error", JOptionPane.INFORMATION_MESSAGE);
				}
				
				if(!docJList.isSelectionEmpty()){
					
					int dialogButton = JOptionPane.YES_NO_OPTION;
					int dialogResult = JOptionPane.showConfirmDialog(frame, "Are you sure to delete patient from the queue?", "Delete patient", dialogButton);
					
					// YES
					if (dialogResult == 0){
						// updating DB
						editPatient = docJList.getSelectedValue();
						editPatient.discharged = 1;
						editPatient.treatment = ">>> Had been deleted from PRIORITY (" + editPatient.getPriority() +") queue <<<";
						editPatient.priority = 0;
						db.update(editPatient);
						
						// delete from Sorted DLL list
						dllSorted.delete(docJList.getSelectedIndex()+1);
						docJList.clearSelection();
						
						// add updated list to JList
						addToJList(docJList, dllSorted);
						
						doc_Notice_Lbl.setText("Patient deleted from the queue!");
						runTimer(doc_Notice_Lbl);
					}
					// NO
					else{
						
						doc_Notice_Lbl.setText("Action cancelled");
						runTimer(doc_Notice_Lbl);
					}
					
				}
			}
		});
		doc_Delete_Btn.setFont(new Font("Arial", Font.BOLD, 11));
		doc_Delete_Btn.setBounds(773, 466, 146, 33);
		panel_2.add(doc_Delete_Btn);
		
		// load selected patient for edit
		JButton doc_Edit_Btn = new JButton("EDIT");
		doc_Edit_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(!docJList.isSelectionEmpty()){
					editPatient = docJList.getSelectedValue();
					isQueueList = true;
				}
				else if(!docJListAll.isSelectionEmpty()){
					editPatient = docJListAll.getSelectedValue();
					isQueueList = false;
				}
				if(!docJList.isSelectionEmpty() || !docJListAll.isSelectionEmpty()){
					doc_FN_TF.setText(editPatient.firstName);
					doc_LN_TF.setText(editPatient.lastName);
					doc_DOB_TF.setText(editPatient.dob);
					doc_Cond_TA.setText(editPatient.condition);
					doc_Vital_TA.setText(editPatient.vitalSigns);
					doc_Treat_TA.setText(editPatient.treatment);
					isEdit = true;
					
					// enable fields for edit patient
					doc_FN_TF.setEditable(true);
					doc_LN_TF.setEditable(true);
					doc_DOB_TF.setEditable(true);
					doc_Cond_TA.setEditable(true);
					doc_Vital_TA.setEditable(true);
					doc_Treat_TA.setEditable(true);
				}
					
				
			}
		});
		doc_Edit_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		doc_Edit_Btn.setBounds(566, 466, 124, 40);
		panel_2.add(doc_Edit_Btn);
		
		JButton doc_Clear_Btn = new JButton("CLEAR");
		doc_Clear_Btn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clear("docPanel");
				
			}
		});
		doc_Clear_Btn.setFont(new Font("Arial", Font.BOLD, 12));
		doc_Clear_Btn.setBounds(180, 517, 124, 40);
		panel_2.add(doc_Clear_Btn);
		
		doc_Notice_Lbl = new JLabel("");
		doc_Notice_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		doc_Notice_Lbl.setFont(new Font("Arial", Font.PLAIN, 16));
		doc_Notice_Lbl.setBounds(223, 566, 543, 33);
		panel_2.add(doc_Notice_Lbl);
		
		JLabel doc_Vital_Lbl = new JLabel("Vital signs:");
		doc_Vital_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_Vital_Lbl.setBounds(30, 261, 103, 14);
		panel_2.add(doc_Vital_Lbl);
		
		JScrollPane scrollPane_11 = new JScrollPane();
		scrollPane_11.setBounds(30, 286, 272, 76);
		panel_2.add(scrollPane_11);
		
		doc_Vital_TA = new JTextArea();
		doc_Vital_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		doc_Vital_TA.setEditable(false);
		scrollPane_11.setViewportView(doc_Vital_TA);
		
		JScrollPane scrollPane_12 = new JScrollPane();
		scrollPane_12.setBounds(30, 174, 272, 76);
		panel_2.add(scrollPane_12);
		
		doc_Cond_TA = new JTextArea();
		doc_Cond_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		doc_Cond_TA.setEditable(false);
		scrollPane_12.setViewportView(doc_Cond_TA);
		
		JLabel doc_Treat_Lbl = new JLabel("Treatment:");
		doc_Treat_Lbl.setFont(new Font("Arial", Font.PLAIN, 12));
		doc_Treat_Lbl.setBounds(30, 373, 103, 14);
		panel_2.add(doc_Treat_Lbl);
		
		doc_List_TP = new JTabbedPane(JTabbedPane.TOP);
		doc_List_TP.setBounds(746, 74, 210, 381);
		panel_2.add(doc_List_TP);
		
		JScrollPane scrollPane_14 = new JScrollPane();
		doc_List_TP.addTab("Queue by priority \u2193", null, scrollPane_14, "Sorted with higher priority on top");
		doc_List_TP.setFont(new Font("Arial", Font.BOLD, 12));
		
		// JList listener to display selected patient
		docJList = new JList<Patient>(doclistModel);
		docJList.setFont(new Font("Franklin Gothic Demi", Font.PLAIN, 14));
		docJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		docJList.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!docJList.isSelectionEmpty()){
					Patient p = docJList.getSelectedValue();
					docSP_FN_TF.setText(p.firstName);
					docSP_LN_TF.setText(p.lastName);
					docSP_DOB_TF.setText(p.dob);
					docSP_Cond_TA.setText(p.condition);
					docSP_Vital_TA.setText(p.vitalSigns);
					docSP_Treat_TA.setText(p.treatment);
					docSP_Prior_Lbl.setText("Priority: " + p.getPriority());
				}
				return;
			}
		});
		scrollPane_14.setViewportView(docJList);
		
		JScrollPane scrollPane_15 = new JScrollPane();
		doc_List_TP.addTab("All", null, scrollPane_15, null);
		
		// listener for Doctors tabbed pane
		doc_List_TP.addChangeListener(new ChangeListener() {
	        public void stateChanged(ChangeEvent e) {
	        	
	        	if(doc_List_TP.getSelectedIndex()==0){
	        		docJListAll.clearSelection();
	        	}
	        	// clicked to show list of all patients
	        	if(doc_List_TP.getSelectedIndex()==1){
	        		docJList.clearSelection();
	        		
	        		if(dllAll.size() > 0){
	        			dllAll.empty();
	        		}
	        		db.load(dllAll, "getAll");
	        		addToJList(docJListAll, dllAll);
	        	}
	        }
	    });
		
		
		docJListAll = new JList(listModelAll);
		docJListAll.setFont(new Font("Franklin Gothic Demi", Font.PLAIN, 14));
		docJListAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		docJListAll.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if(!docJListAll.isSelectionEmpty()){
					Patient p = docJListAll.getSelectedValue();
					docSP_FN_TF.setText(p.firstName);
					docSP_LN_TF.setText(p.lastName);
					docSP_DOB_TF.setText(p.dob);
					docSP_Cond_TA.setText(p.condition);
					docSP_Vital_TA.setText(p.vitalSigns);
					docSP_Treat_TA.setText(p.treatment);
					docSP_Prior_Lbl.setText("Priority: " + p.getPriority());
				}
				return;
			}
		});
		scrollPane_15.setViewportView(docJListAll);
		
		JScrollPane scrollPane_13 = new JScrollPane();
		scrollPane_13.setBounds(34, 398, 270, 72);
		panel_2.add(scrollPane_13);
		
		doc_Treat_TA = new JTextArea();
		doc_Treat_TA.setFont(new Font("SansSerif", Font.PLAIN, 12));
		doc_Treat_TA.setEditable(false);
		scrollPane_13.setViewportView(doc_Treat_TA);
		
		JLabel doc_Main_Lbl = new JLabel("Doctors Patient Management");
		doc_Main_Lbl.setHorizontalAlignment(SwingConstants.CENTER);
		doc_Main_Lbl.setFont(new Font("Century Gothic", Font.BOLD, 22));
		doc_Main_Lbl.setBounds(358, 11, 358, 28);
		panel_2.add(doc_Main_Lbl);
		
	}
	

	// display list values in JList from DoubleLinkedList
	public void addToJList(JList list, DoubleLinkedList dll){
		DefaultListModel model= (DefaultListModel) list.getModel();
		model.clear();
		if(dll.size()>0){
			for (int i=1; i <= dll.size(); i++){
				model.addElement(dll.getNode(i).getPatient());
			}
		}
		
	}
	
	// method to clear elements: text fields, lists, etc.
	public void clear(String panelName){
		
		switch(panelName) {
			case "recPanel":
				
				recFN_TF.setText("");
				recLN_TF.setText("");
				recDOB_TF.setText("");
				recCondition_TA.setText("");
				recSP_FN_TF.setText("");
				recSP_LN_TF.setText("");
				recSP_DOB_TF.setText("");
				recSP_Cond_TA.setText("");
				recSP_Vital_TA.setText("");
				recSP_Cond_TA.setText("");
				recSP_Treat_TA.setText("");
				
				recJList.clearSelection();
				recJListAll.clearSelection();
				break;
				
			case "nurPanel":
				
				nur_FN_TF.setText("");
				nur_LN_TF.setText("");
				nur_DOB_TF.setText("");
				nur_Cond_TA.setText("");
				nur_Vital_TA.setText("");
				nur_Treat_TA.setText("");
				nurSP_FN_TF.setText("");
				nurSP_LN_TF.setText("");
				nurSP_DOB_TF.setText("");
				nurSP_Cond_TA.setText("");
				nurSP_Vital_TA.setText("");
				nurSP_Treat_TA.setText("");
				nurPrior_CB.setSelectedIndex(-1);
				nurSP_Prior_Lbl.setText("");
				
				nurJList.clearSelection();
				nurJListAll.clearSelection();
				
				// disable fields for edit while patient is not selected
				nur_FN_TF.setEditable(false);
				nur_LN_TF.setEditable(false);
				nur_DOB_TF.setEditable(false);
				nur_Cond_TA.setEditable(false);
				nur_Vital_TA.setEditable(false);
				
				break;
			case "docPanel":
				
				doc_FN_TF.setText("");
				doc_LN_TF.setText("");
				doc_DOB_TF.setText("");
				doc_Cond_TA.setText("");
				doc_Vital_TA.setText("");
				doc_Treat_TA.setText("");
				docSP_FN_TF.setText("");
				docSP_LN_TF.setText("");
				docSP_DOB_TF.setText("");
				docSP_Cond_TA.setText("");
				docSP_Vital_TA.setText("");
				docSP_Treat_TA.setText("");
				docSP_Prior_Lbl.setText("");
	
				docJList.clearSelection();
				docJListAll.clearSelection();
				
				// disable fields for edit while patient is not selected
				doc_FN_TF.setEditable(false);
				doc_LN_TF.setEditable(false);
				doc_DOB_TF.setEditable(false);
				doc_Cond_TA.setEditable(false);
				doc_Vital_TA.setEditable(false);
				doc_Treat_TA.setEditable(false);
				
				break;
			default:
				// should not get here
				break;
		
		}
		
	}
	
	// timer method to make notice messages disappear after some time (5000 = 5 sec)
	public void runTimer(JLabel label){
		Timer t = new Timer(5000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                label.setText("");
            }
        });
        t.setRepeats(false);
        t.start();
	}
}
